pandoc --list-highlight-styles
help(quarto)
help.search('quarto')
install.packages("quarto")
require(quarto)
pandoc --list-highlight-styles
help(glossary)
help.search('gloassary')
help("quarto")
help(install.packages)
installed.packages()
ifelse(require(MASS),'y','n')
ifelse(require(glossary),'y','n')
ifelse(require(glossary,quietly=TRUE),'y','n')
ifelse(require('glossary',quietly=TRUE),'y','n')
ifelse(require('MASS',quietly=TRUE),'y','n')
help(control)
help(Control)
help(install.packages)
installed.packages()[,1]
help(nmle)
help(nlme)
help(MASS)
help.search('zinf')
help.search('zinb')
help.search('zinb.glm')
help.search('glm.zinb')
help.search('hurdle')
help.search('zero-inflated')
help.search('hurdle')
help(pscl)
#Package management for SAURON
sauron.packages <- c('knitr','quarto','rmarkdown','MASS','pscl')
testpack <- function(package){
if !require(package,quietly=TRUE){
#Package management for SAURON
sauron.packages <- c('knitr','quarto','rmarkdown','MASS','pscl')
testpack <- function(package){
if (require(package,quietly=TRUE)==FALSE){
install.packages(package,quiet=TRUE)
require(package,quietly=TRUE)
}
}
sapply(sauron.packages,testpack)
install.packages(package, quiet = TRUE)
install.packages(package, quiet = TRUE)
install.packages(package, quiet = TRUE)
install.packages(package, quiet = TRUE)
help("install.packages")
require('package'MASS,quietly=TRUE)
require('MASS',quietly=TRUE)
require('MASS',quietly=TRUE)==TRUE
require('MASS',quietly=TRUE)==FALSE
help(reauire)
help(require)
help(sapply)
help(install.packages)
install.packages('thematic')
help("lines")
install.packages('VennDiagrams')
install.packages('VennDiagram')
require(VennDiagram)
help("venn.diagram")
help(symbols)
help(text)
help(symbols)
symbols(x=1,y=1,circles=0.8,inches=FALSE,fg='white',bg='grey80',
xlim=c(0,3),ylim=c(0,2),xaxt='n',yaxt='n',
xlab=NULL,ylab=NULL,add=FALSE)
symbols(x=1,y=1,circles=0.8,inches=FALSE,fg='white',bg='grey80',
xlim=c(0,3),ylim=c(0,2),xaxt='n',yaxt='n',
xlab=NA,ylab=NA,add=FALSE)
help(par)
52*51*50*49*48
choose(1.7e6,100)
choose(1.7e6,5)
choose(52,5)
choose(6,2)
factorial(24)
factorial(24)/factorial(6)/factorial(4)
factorial(24)/(factorial(6)^4)/(factorial(4)^6)
factorial(24)/factorial(6)/(factorial(4)^6)
52*3*48*47 * 46
52!/47!
52*51*50*49*48
161890560/311875200
52*3*49*44*40
(52*3*49*44*40)/311875200
(52*3*48*44*40)/311875200
choose(15,5)
450/3003
choose(10,1)*choose(5,4)
501/3003
1/6
help(&)
help.search('&')
help(outer)
(1:5) %o% (2:6)
outer(1:5,2:6,paste0)
help("datasets")
datasets
require(datasets)
help("datasets")
head(crimtab)
head(mdeaths)
mdeaths
Nile
head(precip)
head(state)
state
state.x77
head(USArrests)
require(tidyverse)
install.packages('tidyverse')
require(tidyverse)
help(filter)
state.x77 %>% filter(Population<500 | Area>1e5)
state.x77 %>% as_tibble
(states <- state.x77 %>% as_tibble)%>% head
states %>% filter(Population<500 | Area>1e5)
union(1:8,3:10)
intersection(1:8,3:10)
intersect(1:8,3:10)
is.element('j',letters)
is.element('J',letters)
is.element(c('a','B','c'),letters)
letters
setdiff(1:8,3:10)
setdiff(1:5,1:10)
setdiff(1:5,11)
setdiff(3:10,1:8)
setequal(1:8,3:10)
setequal(1:8,1:5)
setequal(1:8,8:1)
setequal(c(1,4,9),(1:3)^2)
help(choose)
factorial(1:5)
3/11
choose(13,2)*choose(4,2)*choose(5,2)*choose(12,3)/choose(52,5)
choose(13,1)*choose(4,2)*choose(5,2)*choose(12,3)/choose(52,5)
choose(13,1)*choose(4,2)*choose(12,3)*4*4*4/choose(52,5)
134534400/311875200
52*3*48*44*40*10
52*3*48*44*40*10/(52*51*50*49*48)
52*51*50*49*48
choose(12,3)
choose(12,4)
4^3
choose(365,23)
(365^23 - choose(365,23))/(365^23)
permute <- function(n,k) factorial(n)/factorial(n-k)
1 - permute(365,23)/(365^23)
1 - factorial(365)/(365^23)/factorial(342)
1 - exp(sum(log(365:343))-23*log(365))
365^23
prod(365:343)
prod(365:343)/365^23
1-prod(365:343)/365^23
factorial(365)
1/70
1/choose(8,4)
help(par)
par("pin")
par("pin")
1/6
1/256
install.packages('bslib')
install.packages('bslib')
install.packages('shinylive')
require(shinylive)
dnorm(0)
help(plot)
c(0,mean(dnorm(0),1))
hist(rpois(n=1000,lambda=100))
hist(rbinom(n=1000,size=100,prob=0.3))
require(shiny)
install.packages('shiny')
requrie(shiny)
require(shiny)
install.packages('bslib')
require(bslib)
set.seed(2061)
coins <- sample(0:1,50,TRUE,c(0.4,0.6))
coins
sum(coins)
(coins <- c(rep(1,27),rep(0,23)))
help(text)
52*48*44*40*36/(52*51*50*49*48)
3/16
2*pbinom(4937,10000,0.5)
2*pbinom(4933,10000,0.5)
quarto render
quarto render
help("ks.test")
help("suppressWarnings")
help(sliderInput)
require(shiny)
help(sliderInput)
help("fluidRow")
x <- rexp(n=input$nsamp,rate=input$lambda)
help(pageFluid)
require(shinylive)
help("fluidPage")
help(page_fluid)
help.search("page_fluid")
require(bslib)
help(page_fliud)
help(page_fluid)
help(renderPlot)
ll <- function(lambda,x) length(x)*log(lambda) - lambda*sum(x)
l <- function(lambda,x) exp(ll(lambda,x))
dll <-function(lambda,x) length(x)/lambda - sum(x)
ll(3,runif(10))
dll(3,runif(10))
l(3,runif(10))
dll(3,runif(10))
dll(3:8,runif(10))
require(shinylive)
assets_info()
install.packages('shinylive')
require(shinylive)
assets_info()
help(page_fluid)
help.search('page_fluid')
require(bslib)
help(page_fluid)
help(fluidRow)
help.search('fluidRow')
require(shiny)
help(fluidRow)
help("sliderInput")
help(column)
help("HTML")
help("renderPlot")
table(rpois(50,3))
plot(table(rpois(50,3)))
plot(table(rpois(50,3)))
length(table(rpois(50,3)))
help(mtext)
dpois(15,5)
dpois(7000,5000)
dpois(6000,5000)
dpois(5400,5000)
dpois(5200,5000)
dpois(1:10)
dpois(1:10,4)
dpois(5250,5)
dpois(5250,500)
dpois(5250,5000)
dpois(5210,5000)
dpois(5208,5000)
dpois(5205,5000)
dpois(5203,5000)
dpois(5202,5000)
dpois(5201,5000)
dpois(5250,5000)
dpois(5280,5000)
dpois(5300,5000)
dpois(5290,5000)
dpois(5295,5000)
dpois(5298,5000)
dpois(5297,5000)
dpois(5296,5000)
(0:5296)[dpois(0:5296,500)>1e-6]
z()[dpois(30:50,40)<=dpois(33,40)]
(30:50)[dpois(30:50,40)<=dpois(33,40)]
log(1000)
log(1000,10)
dpois(2900,2500)
dpois(2800,2500)
dpois(2700,2500)
dpois(2710,2500)
dpois(2713,2500)
dpois(2716,2500)
dpois(2715,2500)
help(Control)
expression(paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(w(),5*length(x()))),1), '% of the time. Since ', alpha == input$alpha, text1(), ' the null hypothesis that', lambda == 5))
paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(w(),5*length(x()))),1), '% of the time. Since ', alpha == input$alpha, text1(), ' the null hypothesis that', lambda == 5)
paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(30:50,40)),1), '% of the time. Since ', alpha == 0.05, 'we reject', ' the null hypothesis that', lambda == 5)
help(column)
1e5
1e5+1
help(hist)
help(seq)
help(var)
max(1:5,6:10)
max(c(1,3,9),c(2,4,5))
help(max)
ui <- page_fluid(
tags$head(tags$style(HTML("body {overflow-x: hidden;}"))),
title = "Variance and bias of Normal estimators",
fluidRow(column(width=6,offset=3,sliderInput("nsamp", "N (sample size)", min=5, max=500, value=50))),
fluidRow(column(width=12,plotOutput("distPlot1"))),
fluidRow(column(width=12,plotOutput("distPlot2"))))
server <- function(input, output) {
x <- reactive({matrix(rnorm(1e5*input$nsamp,100,7),nrow=1e5)})
xbar <- reactive({apply(x(),1,mean)})
xmed <- reactive({apply(x(),1,median)})
xvar <- reactive({apply(x(),1,var)})
xmse <- reactive({apply(x(),1,var)*(input$nsamp-1)/input$nsamp})
output$distPlot1 <- renderPlot({hist(xbar(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), main='100,000 estimates for the mean', xlab='Mu-hat', ylab='Frequency', col='#00000080', density=10); hist(xmed(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Sample mean','Sample median'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
output$distPlot2 <- renderPlot({hist(xmse(), breaks=seq(min(xmse(),xvar()),max(xmse(),xvar()),length.out=31), main='100,000 estimates for the variance', xlab='Sigma^2-hat', ylab='Frequency', col='#00000080', density=10); hist(xvar(), breaks=seq(min(xmse(),xvar()),max(xmse(),xvar()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Uncorrected: /(n)','Corrected: /(n-1)'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
}
shinyApp(ui = ui, server = server)
help(fluidRow)
sqrt(rnorm(5)^2*4/5)
help(hist)
help(min)
help)(seq)
help("seq")
help(apply)
ui <- page_fluid(
tags$head(tags$style(HTML("body {overflow-x: hidden;}"))),
title = "Variance and bias of Normal estimators",
fluidRow(column(width=3,""),column(width=6,sliderInput("nsamp", "N (sample size)", min=5, max=200, value=25)),column(width=3,"")),
fluidRow(column(width=12,plotOutput("distPlot1"))),
fluidRow(column(width=12,plotOutput("distPlot2"))))
server <- function(input, output) {
x <- reactive({matrix(rnorm(10000*input$nsamp,100,20),nrow=10000)})
xbar <- reactive({apply(x(),1,mean)})
xmed <- reactive({apply(x(),1,median)})
xsd <- reactive({apply(x(),1,sd)})
xrmse <- reactive({sqrt(xsd()^2*(input$nsamp-1)/input$nsamp)})
output$distPlot1 <- renderPlot({hist(xbar(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), main='10,000 estimates for the mean', xlab='Mu-hat', ylab='Frequency', col='#00000080', density=10); hist(xmed(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Sample mean','Sample median'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
output$distPlot2 <- renderPlot({hist(xrmse(), breaks=seq(min(xrmse(),xsd()),max(xrmse(),xsd()),length.out=31), main='10,000 estimates for the std dev', xlab='Sigma-hat', ylab='Frequency', col='#00000080', density=10); hist(xsd(), breaks=seq(min(xrmse(),xsd()),max(xrmse(),xsd()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Uncorrected: /(n)','Corrected: /(n-1)'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
}
shinyApp(ui = ui, server = server)
help(density)
help(hist)
c(40, 55, 144, 148, 216, 230, 331, 335, 389, 410)
sum(c(40, 55, 144, 148, 216, 230, 331, 335, 389, 410))
sum(c(42, 55, 144, 148, 216, 230, 331, 335, 389, 410))
sqrt(4.2^2*sqrt(10))
rnorm(10,409.8,7.5)
roun(rnorm(10,409.8,7.5),1)
round(rnorm(10,409.8,7.5),1)
