head(mdeaths)
mdeaths
Nile
head(precip)
head(state)
state
state.x77
head(USArrests)
require(tidyverse)
install.packages('tidyverse')
require(tidyverse)
help(filter)
state.x77 %>% filter(Population<500 | Area>1e5)
state.x77 %>% as_tibble
(states <- state.x77 %>% as_tibble)%>% head
states %>% filter(Population<500 | Area>1e5)
union(1:8,3:10)
intersection(1:8,3:10)
intersect(1:8,3:10)
is.element('j',letters)
is.element('J',letters)
is.element(c('a','B','c'),letters)
letters
setdiff(1:8,3:10)
setdiff(1:5,1:10)
setdiff(1:5,11)
setdiff(3:10,1:8)
setequal(1:8,3:10)
setequal(1:8,1:5)
setequal(1:8,8:1)
setequal(c(1,4,9),(1:3)^2)
help(choose)
factorial(1:5)
3/11
choose(13,2)*choose(4,2)*choose(5,2)*choose(12,3)/choose(52,5)
choose(13,1)*choose(4,2)*choose(5,2)*choose(12,3)/choose(52,5)
choose(13,1)*choose(4,2)*choose(12,3)*4*4*4/choose(52,5)
134534400/311875200
52*3*48*44*40*10
52*3*48*44*40*10/(52*51*50*49*48)
52*51*50*49*48
choose(12,3)
choose(12,4)
4^3
choose(365,23)
(365^23 - choose(365,23))/(365^23)
permute <- function(n,k) factorial(n)/factorial(n-k)
1 - permute(365,23)/(365^23)
1 - factorial(365)/(365^23)/factorial(342)
1 - exp(sum(log(365:343))-23*log(365))
365^23
prod(365:343)
prod(365:343)/365^23
1-prod(365:343)/365^23
factorial(365)
1/70
1/choose(8,4)
help(par)
par("pin")
par("pin")
1/6
1/256
install.packages('bslib')
install.packages('bslib')
install.packages('shinylive')
require(shinylive)
dnorm(0)
help(plot)
c(0,mean(dnorm(0),1))
hist(rpois(n=1000,lambda=100))
hist(rbinom(n=1000,size=100,prob=0.3))
require(shiny)
install.packages('shiny')
requrie(shiny)
require(shiny)
install.packages('bslib')
require(bslib)
set.seed(2061)
coins <- sample(0:1,50,TRUE,c(0.4,0.6))
coins
sum(coins)
(coins <- c(rep(1,27),rep(0,23)))
help(text)
52*48*44*40*36/(52*51*50*49*48)
3/16
2*pbinom(4937,10000,0.5)
2*pbinom(4933,10000,0.5)
quarto render
quarto render
help("ks.test")
help("suppressWarnings")
help(sliderInput)
require(shiny)
help(sliderInput)
help("fluidRow")
x <- rexp(n=input$nsamp,rate=input$lambda)
help(pageFluid)
require(shinylive)
help("fluidPage")
help(page_fluid)
help.search("page_fluid")
require(bslib)
help(page_fliud)
help(page_fluid)
help(renderPlot)
ll <- function(lambda,x) length(x)*log(lambda) - lambda*sum(x)
l <- function(lambda,x) exp(ll(lambda,x))
dll <-function(lambda,x) length(x)/lambda - sum(x)
ll(3,runif(10))
dll(3,runif(10))
l(3,runif(10))
dll(3,runif(10))
dll(3:8,runif(10))
require(shinylive)
assets_info()
install.packages('shinylive')
require(shinylive)
assets_info()
help(page_fluid)
help.search('page_fluid')
require(bslib)
help(page_fluid)
help(fluidRow)
help.search('fluidRow')
require(shiny)
help(fluidRow)
help("sliderInput")
help(column)
help("HTML")
help("renderPlot")
table(rpois(50,3))
plot(table(rpois(50,3)))
plot(table(rpois(50,3)))
length(table(rpois(50,3)))
help(mtext)
dpois(15,5)
dpois(7000,5000)
dpois(6000,5000)
dpois(5400,5000)
dpois(5200,5000)
dpois(1:10)
dpois(1:10,4)
dpois(5250,5)
dpois(5250,500)
dpois(5250,5000)
dpois(5210,5000)
dpois(5208,5000)
dpois(5205,5000)
dpois(5203,5000)
dpois(5202,5000)
dpois(5201,5000)
dpois(5250,5000)
dpois(5280,5000)
dpois(5300,5000)
dpois(5290,5000)
dpois(5295,5000)
dpois(5298,5000)
dpois(5297,5000)
dpois(5296,5000)
(0:5296)[dpois(0:5296,500)>1e-6]
z()[dpois(30:50,40)<=dpois(33,40)]
(30:50)[dpois(30:50,40)<=dpois(33,40)]
log(1000)
log(1000,10)
dpois(2900,2500)
dpois(2800,2500)
dpois(2700,2500)
dpois(2710,2500)
dpois(2713,2500)
dpois(2716,2500)
dpois(2715,2500)
help(Control)
expression(paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(w(),5*length(x()))),1), '% of the time. Since ', alpha == input$alpha, text1(), ' the null hypothesis that', lambda == 5))
paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(w(),5*length(x()))),1), '% of the time. Since ', alpha == input$alpha, text1(), ' the null hypothesis that', lambda == 5)
paste('Under H0, data as extreme as our sample are observed ', round(100*sum(dpois(30:50,40)),1), '% of the time. Since ', alpha == 0.05, 'we reject', ' the null hypothesis that', lambda == 5)
help(column)
1e5
1e5+1
help(hist)
help(seq)
help(var)
max(1:5,6:10)
max(c(1,3,9),c(2,4,5))
help(max)
ui <- page_fluid(
tags$head(tags$style(HTML("body {overflow-x: hidden;}"))),
title = "Variance and bias of Normal estimators",
fluidRow(column(width=6,offset=3,sliderInput("nsamp", "N (sample size)", min=5, max=500, value=50))),
fluidRow(column(width=12,plotOutput("distPlot1"))),
fluidRow(column(width=12,plotOutput("distPlot2"))))
server <- function(input, output) {
x <- reactive({matrix(rnorm(1e5*input$nsamp,100,7),nrow=1e5)})
xbar <- reactive({apply(x(),1,mean)})
xmed <- reactive({apply(x(),1,median)})
xvar <- reactive({apply(x(),1,var)})
xmse <- reactive({apply(x(),1,var)*(input$nsamp-1)/input$nsamp})
output$distPlot1 <- renderPlot({hist(xbar(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), main='100,000 estimates for the mean', xlab='Mu-hat', ylab='Frequency', col='#00000080', density=10); hist(xmed(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Sample mean','Sample median'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
output$distPlot2 <- renderPlot({hist(xmse(), breaks=seq(min(xmse(),xvar()),max(xmse(),xvar()),length.out=31), main='100,000 estimates for the variance', xlab='Sigma^2-hat', ylab='Frequency', col='#00000080', density=10); hist(xvar(), breaks=seq(min(xmse(),xvar()),max(xmse(),xvar()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Uncorrected: /(n)','Corrected: /(n-1)'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
}
shinyApp(ui = ui, server = server)
help(fluidRow)
sqrt(rnorm(5)^2*4/5)
help(hist)
help(min)
help)(seq)
help("seq")
help(apply)
ui <- page_fluid(
tags$head(tags$style(HTML("body {overflow-x: hidden;}"))),
title = "Variance and bias of Normal estimators",
fluidRow(column(width=3,""),column(width=6,sliderInput("nsamp", "N (sample size)", min=5, max=200, value=25)),column(width=3,"")),
fluidRow(column(width=12,plotOutput("distPlot1"))),
fluidRow(column(width=12,plotOutput("distPlot2"))))
server <- function(input, output) {
x <- reactive({matrix(rnorm(10000*input$nsamp,100,20),nrow=10000)})
xbar <- reactive({apply(x(),1,mean)})
xmed <- reactive({apply(x(),1,median)})
xsd <- reactive({apply(x(),1,sd)})
xrmse <- reactive({sqrt(xsd()^2*(input$nsamp-1)/input$nsamp)})
output$distPlot1 <- renderPlot({hist(xbar(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), main='10,000 estimates for the mean', xlab='Mu-hat', ylab='Frequency', col='#00000080', density=10); hist(xmed(), breaks=seq(min(xbar(),xmed()),max(xbar(),xmed()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Sample mean','Sample median'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
output$distPlot2 <- renderPlot({hist(xrmse(), breaks=seq(min(xrmse(),xsd()),max(xrmse(),xsd()),length.out=31), main='10,000 estimates for the std dev', xlab='Sigma-hat', ylab='Frequency', col='#00000080', density=10); hist(xsd(), breaks=seq(min(xrmse(),xsd()),max(xrmse(),xsd()),length.out=31), col='#0000ff80', add=TRUE); legend(x='topright', legend=c('Uncorrected: /(n)','Corrected: /(n-1)'), density=c(20,-1), fill=c('#00000080','#0000ff80'), bty='n')})
}
shinyApp(ui = ui, server = server)
help(density)
help(hist)
c(40, 55, 144, 148, 216, 230, 331, 335, 389, 410)
sum(c(40, 55, 144, 148, 216, 230, 331, 335, 389, 410))
sum(c(42, 55, 144, 148, 216, 230, 331, 335, 389, 410))
sqrt(4.2^2*sqrt(10))
rnorm(10,409.8,7.5)
roun(rnorm(10,409.8,7.5),1)
round(rnorm(10,409.8,7.5),1)
help(sliderInput)
pi
help(abline)
prop.test(x=13,n=20)
9*t(c(1,2,3))%*%c(1,2,3)
9*c(1,2,3))%*%t(c(1,2,3))
9*c(1,2,3)%*%t(c(1,2,3))
9*solve(c(1,2,3)%*%t(c(1,2,3)))
help(solve)
help(par)
pbinom(5,10,0.08)
1-pbinom(5,10,0.08)
1-pbinom(5,50,0.08)
1-pbinom(5,70,0.08)
1-pbinom(5,100,0.08)
1-pbinom(5,140,0.08)
1-pbinom(5,130,0.08)
1-pbinom(5,120,0.08)
1-pbinom(5,110,0.08)
1-pbinom(5,115,0.08)
help(fitdist)
help(fitfistr)
help(fitdistr)
help.search(fitdist)
help.search(fitdistr)
help.search("fitdistr")
help.search("fitdist")
install.packages('fitdistrplus')
require(fitdistrplus)
help("fitdist")
help("fitdist")
help("fitdist")
help(rnbinom)
fitdistr(rnbinom(5000,4,0.1))
fitdistr(rnbinom(5000,4,0.1),'negative binomial')
help(optim)
table(rpois(5000,0.05))
table(rpois(50000,0.05))
table(rpois(50000,0.05))
table(rpois(50000,0.05))
table(rpois(50000,0.05))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
table(rpois(50000,0.07))
set.seed(1139)
table(rpois(50000,0.07))
set.seed(1139)
hidden.data <- rpois(n=50000,lambda=.07)
table(hidden.data)
observed.data <- hidden.data[hidden.data!=0]
table(observed.data)
ll.trunc.pois <- function(lambda,x){
length(x)*log(lambda/(1-lambda)) - lambda*sum(x)}
help(optim)
optim(par=0.1,fn=ll.trunc.pois,x=observed.data,
control=list(fnscale=-1))
warnings()
optim(par=0.1,fn=ll.trunc.pois,x=observed.data,
control=list(fnscale=-1),method='L-BFGS-B',
lower=0,upper=0.5)
plot(ll.trunc.pois(seq(0.01,0.5,0.01),observed.data))
plot(ll.trunc.pois(seq(0.01,5,0.01),observed.data))
plot(ll.trunc.pois(seq(0.01,0.1,0.001),observed.data))
ll.trunc.pois(0.07,1)
ll.trunc.pois(0.07,2)
ll.trunc.pois(0.07,3)
ll.trunc.pois(0.07,sample(1:3,100,TRUE))
dpois(0:3,0.07)
factorial(1:5)
ll.trunc.pois <- function(lambda,x){                   # <3>
sum(x)*log(lambda) - lambda*sum(1/factorial(x)) -    # <3>
length(x)*log(1-exp(-1*lambda))}                   # <3>
plot(ll.trunc.pois(seq(0.01,0.1,0.001),observed.data))
outer(1:3,4:9)
help(text)
help(sapply)
pexp(0.6)*pexp(0.8)
pexp(0.7)*pexp(0.7)
(1-pexp(0.7))*(1-pexp(0.7))
(1-pexp(0.6))*(1-pexp(0.8))
1-ppois(1,1.4)
1-ppois(2,1.4)
dpois(0:2,1.4)
dpois(0,48/12)
(1-ppois(18,1/12)*(1-ppois(30,1/12))
(1-ppois(18,1/12))*(1-ppois(30,1/12))
(1-pexp(18,1/12))*(1-pexp(30,1/12))
1-pexp(1.4)
(1-pexp(18/12))*(1-pexp(30/12))
dpois(0,48/12)
ppois(0,48/12)
(1-pexp(q=18/12,rate=1))*(1-pexp(q=30/12,rate=1))
1-pexp(q=48/12)
1-pexp(q=48,rate=1/12)
dpois(0,18/12)*dpois(0,30/12)
dpois(0,48/12)
choose(8,4)
help(choose)
1/70
help(prop.test)
binom.test(x=65,n=1000,alternative='two.sided',conf.level=0.90)
help(root)
help.search('root')
uniroot(function(z){pbinom(65,1000,z)-0.05},c(0,0.065))
uniroot(function(z){pbinom(65,1000,z)-0.95},c(0,0.065))
.Machine$double.eps^0.25
uniroot(function(z){pbinom(65,1000,z)-0.95},c(0,0.065),tol=1e-8)
uniroot(function(z){pbinom(65,1000,z)-0.05},c(0.065,0.1),tol=1e-8)
uniroot(function(z){pbinom(65,1000,z)-0.05},c(0.065,0.1),tol=1e-8)
uniroot(function(z){pbinom(65,1000,z)-0.05},c(0.065,0.1),tol=1e-8)$root
uniroot(function(z){pbinom(65,1000,z)-0.95},c(0,0.065),tol=1e-8)$root
uniroot(function(z){pbinom(65,1000,z)-0.95},c(0,0.053),tol=1e-8)$root
binom.test(x=65,n=1000,alternative='two.sided',conf.level=0.90)
uniroot(function(z){pbinom(65,1000,z)-0.95},c(0,0.065),tol=1e-8)$root
plot(seq(0.05,0.055,0.0001),pbinom(65,1000,seq(0.05,0.055,0.0001))
)
uniroot(function(z){pbinom(64,1000,z)-0.95},c(0,0.065),tol=1e-8)$root
binom.test
binom.test(x=89,n=500,alternative='less',conf.level=0.80)
uniroot(function(z){pbinom(89,500,z)-0.20},c(0.178,0.3),tol=1e-8)$root
binom.test(x=89,n=500,alternative='less',conf.level=0.80)$conf.int
help("ks.test")
set.seed(2061); round(rnorm(10,25.2,0.3))
set.seed(2061); round(rnorm(10,25.2,0.3),1)
newbags <- c(25.3, 25.1, 25.1, 25.5, 25.2,
24.7, 24.8, 24.9, 24.8, 25.5)
ks.test(newbags,pnorm,mean=25.8,sd=0.4)
newbags <- c(25.3, 25.1, 25.1, 25.5, 25.2,
24.7, 24.8, 24.9, 24.8, 25.5)
ks.test(newbags,pnorm,mean=25.6,sd=0.4)
newbags <- c(25.3, 25.1, 25.1, 25.5, 25.2,
24.7, 24.8, 24.9, 24.8, 25.5)
ks.test(newbags,pnorm,mean=25.6,sd=0.3)
newbags <- c(25.3, 25.1, 25.1, 25.5, 25.2,
24.7, 24.8, 24.9, 24.8, 25.5)
ks.test(newbags,pnorm,mean=25.6,sd=0.3)
set.seed(2010); round(rnorm(10,25.7,0.5),1)
help(fitdistr)
fitdistr(y,dunif)
y <- c(25.4, 25.7, 26.2, 25.8, 25.6,
26.4, 25.4, 24.9, 26.0, 26.0)
fitdistr(y,dunif)
help(dunif)
fitdistr(y,dunif,start=list(min=24,max=27))
help(fitdistr)
fitdistr(y,dunif)
fitdistr(y,dunif,start=list(min=24,max=27))
warnings()
fitdistr(y,dcauchy)
help(dcauchy)
fitdistr(y,dcauchy,start=list(location=25,scale=0.5))
help("logLik.fitdist")
help(logLik)
help.search('gradient descent')
help.search('gradient')
help(optim)
help(uniroot)
help(geom)
help(pgeom)
graddesc <- function(f, g, x0, b=0.8, tol=1e-2, max.iter=40){
i <- 0
x <- x0
results <- t(c(0,x,-f(x)))
while (sqrt(g(x)%*%g(x))>tol & i<max.iter) {
i <- i + 1
t <- 1
while ((f(x+t*g(x))<f(x)) & t>tol) {
t <- t*b}
x <- x + t*g(x)
results <- rbind(results,t(c(i,x,-f(x))))}
colnames(results) <- c('iter',paste0('x',1:length(x)),'f')
return(results)}
ll.geom <- function(p) length(X)*log(p) + sum(X)*log(1-p)
graddesc(f=ll.geom, g=dll.geom, x0=0.01, tol=1e-10)
X <- c(4,6,10,5,5)
graddesc <- function(f, g, x0, b=0.8, tol=1e-2, max.iter=40){
i <- 0
x <- x0
results <- t(c(0,x,-f(x)))
while (sqrt(g(x)%*%g(x))>tol & i<max.iter) {
i <- i + 1
t <- 1
while ((f(x+t*g(x))<f(x)) & t>tol) {
t <- t*b}
x <- x + t*g(x)
results <- rbind(results,t(c(i,x,-f(x))))}
colnames(results) <- c('iter',paste0('x',1:length(x)),'f')
return(results)}
ll.geom <- function(p) length(X)*log(p) + sum(X)*log(1-p)
graddesc(f=ll.geom, g=dll.geom, x0=0.01, tol=1e-10)
dll.geom <- function(p) length(X)/p - sum(X)/(1-p)
graddesc <- function(f, g, x0, b=0.8, tol=1e-2, max.iter=40){
i <- 0
x <- x0
results <- t(c(0,x,-f(x)))
while (sqrt(g(x)%*%g(x))>tol & i<max.iter) {
i <- i + 1
t <- 1
while ((f(x+t*g(x))<f(x)) & t>tol) {
t <- t*b}
x <- x + t*g(x)
results <- rbind(results,t(c(i,x,-f(x))))}
colnames(results) <- c('iter',paste0('x',1:length(x)),'f')
return(results)}
ll.geom <- function(p) length(X)*log(p) + sum(X)*log(1-p)
graddesc(f=ll.geom, g=dll.geom, x0=0.01, tol=1e-10)
graddesc(f=ll.geom, g=dll.geom, x0=0.1, tol=1e-10)
ll.geom(0.1)
dll.geom(0.1)
graddesc <- function(f, g, x0, b=0.8, tol=1e-2, max.iter=40){
i <- 0
x <- x0
results <- t(c(0,x,-f(x)))
while (sqrt(g(x)%*%g(x))>tol & i<max.iter) {
i <- i + 1
t <- 0.01
while ((f(x+t*g(x))<f(x)) & t>tol) {
t <- t*b}
x <- x + t*g(x)
results <- rbind(results,t(c(i,x,-f(x))))}
colnames(results) <- c('iter',paste0('x',1:length(x)),'f')
return(results)}
graddesc(f=ll.geom, g=dll.geom, x0=0.1, tol=1e-10)
1/24
1/8
help("t.test")
help(states)
help(States)
states
rownames(states)
data(states)
help.search('crime')
help.search('states')
help("state")
beavers1
beavers
data(beavers1)
beaver1
beaver
beaver2
help.search('anorexia')
t.test(x=anorexia$Prewt,conf.level=0.90)
t.test(x=anorexia$Prewt,conf.level=0.90)$interval
t.test(x=anorexia$Prewt,conf.level=0.90)$int
help(t.test)
t.test(x=anorexia$Prewt,conf.level=0.90)$conf.int
anorexia$Postwt-anorexia$Prewt
sum((anorexia$Postwt-anorexia$Prewt)>3)
(anorexia$Postwt-anorexia$Prewt)>3
table((anorexia$Postwt-anorexia$Prewt)>3,anorexia$Treat)
table((anorexia$Postwt-anorexia$Prewt)>2,anorexia$Treat)
table((anorexia$Postwt-anorexia$Prewt)>1,anorexia$Treat)
table((anorexia$Postwt-anorexia$Prewt)>0,anorexia$Treat)
help(prop.test)
anorexia$Success <- 1*(anorexia$Postwt > anorexia$Prewt)
prop.test(table(anorexia$Success[anorexia$Treat=='FT']))
table(anorexia$Success[anorexia$Treat=='FT'])
x.ft <- sum(anorexia$Success[anorexia$Treat=='FT'])
n.ft <- length(anorexia$Success[anorexia$Treat=='FT'])
prop.test(x=x.ft,n=n.ft,conf.level=0.80)
x.ft/n.ft
prop.test(x=x.ft,n=n.ft,conf.level=0.80,correct=FALSE)
mean(c(0.6133404,0.8694307))
(x.ft-0.5)/n.ft
(x.ft-0.25)/n.ft
x.ft
n.ft
fitdistr(x=c(30,20,22),densfun='Poisson')
sqrt(24/3)
help(datasets)
head(penguins)
pairs(penguins[,c(3,5,6)],col=penguins$species)
pairs(penguins[,c(3,5,6,8)],col=penguins$species)
summary(penguins)
help.search('hurdle')
help.search('zero-inflated')
